<!DOCTYPE html>
<html lang="en">
  <head>
    <script>
      window.dataLayer = window.dataLayer || []
      function gtag() {
        dataLayer.push(arguments)
      }
      gtag('js', new Date())
      gtag('config', 'G-5899C1DJM0')
    </script>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link
      rel="apple-touch-icon"
      sizes="57x57"
      href="/roulette/apple-icon-57x57.2f316c01.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="60x60"
      href="/roulette/apple-icon-60x60.3597a0fa.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="72x72"
      href="/roulette/apple-icon-72x72.38143b41.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="76x76"
      href="/roulette/apple-icon-76x76.c2eb0cfb.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="114x114"
      href="/roulette/apple-icon-114x114.482241b6.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="120x120"
      href="/roulette/apple-icon-120x120.721e3998.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="144x144"
      href="/roulette/apple-icon-144x144.15b26ac4.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="152x152"
      href="/roulette/apple-icon-152x152.c70b6780.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/roulette/apple-icon-180x180.1c38e27c.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="/roulette/android-icon-192x192.778fbd46.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/roulette/favicon-32x32.09fde066.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="96x96"
      href="/roulette/favicon-96x96.b27ae6bd.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/roulette/favicon-16x16.c68c989a.png"
    />
    <link rel="manifest" href="/roulette/assets/manifest.webmanifest" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta
      name="msapplication-TileImage"
      content="/assets/ms-icon-144x144.png"
    />
    <meta name="theme-color" content="#ffffff" />
    <title>Marble Roulette</title>
    <style>
      @font-face {
        font-family: 'LINESeedKR-Bd';
        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_11-01@1.0/LINESeedKR-Bd.woff2')
          format('woff2');
        font-weight: 700;
        font-style: normal;
      }
      * {
        box-sizing: border-box;
        font-family: 'LINESeedKR-Bd';
      }
      body {
        margin: 0;
      }
      canvas {
        position: fixed;
        inset: 0;
        width: 100%;
        height: 100%;
      }

      input[type='number']::-webkit-outer-spin-button,
      input[type='number']::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
      #container {
        display: flex;
        /* flex-basis: 40rem; */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 50;
        width: 80%;
        max-width: 80%;
        height: 45%;
        justify-content: center;
        align-items: center;
        transition: all 1s ease-in-out;
      }
      .unitSettings {
        font-size: 1.1rem;
        height: 100%;
        padding: 0.8rem 1.5rem;
        box-shadow: inset 0 0 6rem 4px #f27127;
        background: #d9a84e;
        color: #000;
        border-radius: 0.75em 0 0 0.75em;
        position: relative;
        display: flex;
        flex-direction: column;
      }
      .unitSettings h2 {
        font-size: 3rem;
        text-align: center;
        margin: 0;
      }
      .unitSettings ul {
        list-style-type: none;
        padding: 0;
        display: flex;
        flex-direction: column;
        gap: 0.3rem;
        height: 100%;
      }

      .max-w-30 {
        max-width: 30%;
      }
      .max-w-20 {
        max-width: 20%;
      }
      .rankings {
        z-index: 10;
        color: #000;
        background: #fff;
        border: 2px solid #f38c0e;
        border-radius: 0 0.75rem 0.75rem 0;
        flex-direction: column;
        /* flex-grow: 1; */
        flex-shrink: 1;
        align-items: center;
        padding: 0.8rem 2rem;
        font-size: 2.2rem;
        font-weight: bold;
        transition: all 1s ease-in-out;
        position: relative;
        display: flex;
        box-shadow: inset 0 0 6rem 4px #fff5ef;
        height: 100%;
        width: auto;
        word-break: break-all;
        justify-content: space-between;
        overflow: auto;
      }
      .rankings .ulBox {
        flex-grow: 1;
        display: flex;
        align-items: center;
      }
      .rankings ul {
        margin: 0;
        padding: 0;
        line-height: 2.5rem;
        list-style-type: none;
        position: relative;
        /* bottom: -50%; */
        /* transform: translate(0, -75%); */
      }

      .rankings h2 {
        margin: 0;
        position: relative;
        top: 0rem;
        line-height: 4rem;
      }
      .settings {
        transition: all 1s ease-in-out;
        display: flex;
        flex-direction: column;
        padding: 1rem;
        width: 50%;
        /* flex-grow: 2; */
        flex-shrink: 1;
        height: 100%;
        box-shadow: inset 0 0 6rem 4px #f27127;
        /* border: 1px solid #f27127; */
        background: #d9a84e;
        backdrop-filter: blur(10px);
        color: #000;
        font-size: 1rem;
        font-weight: 300;
        z-index: 11;
      }
      .hide {
        display: none !important;
      }
      .hideY {
        transform: translate(-50%, -300%) !important;
      }

      .settings:focus-within {
        box-shadow: inset 0 0 2rem 4px #f27127;
      }
      .settings textarea {
        width: 100%;
        /* min-height: 22rem; */
        background-color: transparent;
        border: none;
        outline: none;
        font: inherit;
        height: calc(100% - 4.3rem);
        color: inherit;
        padding: 1rem 0;
      }
      .settings .actions {
        font-size: 0.8rem;
        line-height: 1.1rem;
        text-align: right;
        display: flex;
        justify-content: space-between;
      }
      .settings .buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: space-between;
      }
      .settings .actions label {
        font-size: 1.1rem;
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .settings button,
      .unitSettings button {
        padding: 0.3rem 1rem;
        font-size: 1rem;
        border-radius: 10px;
        border: 0;
        line-height: 1.3rem;
        flex-grow: 1;
      }

      .settings button:hover,
      .unitSettings button:hover {
        cursor: pointer;
        background-color: rgb(218, 218, 218);
      }

      .settings .text {
        margin-top: 0;
        font-size: 1rem;
        line-height: 1.2rem;
        color: #000;
        margin: 0;
      }

      input[type='number'] {
        width: 3rem;
        text-align: center;
        border: none;
        outline: none;
        font: inherit;
        color: inherit;
        margin-left: 0.2rem;
        margin-right: 0.2rem;
      }
      #inGame {
        width: fit-content;
      }

      /* @media screen and (min-width: 768px) {
        .settings {
          top: auto;
          bottom: 24px;
          max-width: 50%;
        }
        
      } */

      div.copyright {
        position: fixed;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        font-size: 12px;
        z-index: 999;
      }

      div.copyright a {
        color: white;
      }

      #btnShake {
        font-size: 2em;
      }

      #cameraInfo {
        position: absolute;
        color: white;
        z-index: 50;
        left: 10px;
        bottom: 10px;
      }

      #cameraInfo span {
        display: none;
      }

      #cameraInfo span.free {
        display: block !important;
      }

      /*  div#notice {
        z-index: 999;
        max-width: 100%;
        width: 40em;
        background: #fffc;
        flex-direction: column;
        padding: 1em;
        display: flex;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
      div#notice button {
        width: 50%;
        align-self: flex-end;
        padding: 1em;
      }
      div#notice dt {
        font-weight: 700;
      }
      div#notice dd {
        padding-bottom: 0.5em;
        list-style: disc;
      } */
    </style>
  </head>
  <body>
    <script src="/roulette/index.bc16ab9b.js" defer=""></script>
    <script type="text/javascript">
      function getNames() {
        return document
          .querySelector('#in_names')
          .value.trim()
          .split(/[,\r\n]/g)
          .map((e) => e.trim())
          .filter((e) => !!e)
      }
      function parseName(e) {
        const t = /(\/\d+)/,
          n = /(\*\d+)/,
          o = t.test(e),
          r = n.test(e)
        return {
          name: /^\s*([^\/*]+)?/.exec(e)[1],
          weight: o ? parseInt(t.exec(e)[1].replace('/', '')) : 1,
          count: r ? parseInt(n.exec(e)[1].replace('*', '')) : 1,
        }
      }
      // backup
      function getReady() {
        const e = getNames()
        window.roullete.setMarbles(e), (ready = e.length > 0)
      }
      /* function getReady() {
        const e = getRank()
        window.roullete.setMarbles(e), (ready = e.length > 0)
      } */
      function setWinnerRank(e) {
        ;(document.querySelector('#in_winningRank').value = e),
          (window.options.winningRank = e - 1),
          window.roullete.setWinningRank(window.options.winningRank)
      }
      function getRank() {
        const e = getNames()
        let parsedNames = new Object()
        let rankArr = []

        if (e.length > 0) {
          e.forEach((name) => {
            let dd = parseName(name)
            if (Object.keys(parsedNames).includes(dd.name)) {
              parsedNames[dd.name].count += dd.count
            } else {
              parsedNames[dd.name] = { name: dd.name, count: dd.count }
            }
          })
          for (var name in parsedNames) {
            rankArr.push(parsedNames[name])
          }
          rankArr.sort(function (a, b) {
            return b.count - a.count
          })
          for (var i in rankArr) {
            rankArr[i].rank = Number(i) + 1
          }
          return rankArr
        } else {
          return
        }
      }
      function inputNameFn() {
        const e = getNames(),
          t = new Set(),
          n = {}
        e.forEach((e) => {
          const o = parseName(e),
            r = o.weight > 1 ? `${o.name}/${o.weight}` : o.name
          t.has(r) || (t.add(r), (n[r] = 0)), (n[r] += o.count)
        })
        const o = []
        Object.keys(n).forEach((e) => {
          n[e] > 1 ? o.push(`${e}*${n[e]}`) : o.push(e)
        })
        if (e.length > 0) {
          document.querySelector('#rankings').style.transform =
            'translate(0, 0)'
        } else {
          document.querySelector('#rankings').style.transform =
            'translate(-100%, -0%)'
        }
        if (!document.querySelector('#in_names').value == '') {
          document.querySelector('#in_names').value = o.join(',') + ','
        }
        renderRank(), getReady()
      }
      function renderRank() {
        const rank = getRank()
        const ul = document.querySelector('#rankings ul')
        ul.replaceChildren()
        if (rank) {
          for (var i in rank) {
            if (i > 4) {
              console.log("it's over Out!")
              return
            }
            const li = document.createElement('li')
            li.innerText = `#${rank[i].rank} ${rank[i].name} ${rank[i].count}개`
            ul.appendChild(li)
          }
        }
      }
      let ready = !1
      var keyPressed = {}
      document.addEventListener('DOMContentLoaded', () => {
        window.addEventListener('keydown', (e) => {
          if (
            document.querySelector('#container').classList.contains('hideY')
          ) {
            if (e.code == 'Space') {
              window.roullete.shake()
            }
            if (e.code == 'KeyV') {
              window.roullete._camera.setSelfCam(
                !window.roullete._camera.selfCam
              )
              window.roullete._camera.keyPressed = {}

              document
                .querySelector('#cameraInfo span')
                .classList.contains('free')
                ? document
                    .querySelector('#cameraInfo span')
                    .classList.remove('free')
                : document
                    .querySelector('#cameraInfo span')
                    .classList.add('free')
            }
            if (window.roullete._camera.selfCam) {
              window.roullete._camera.keyPressed[e.code] = true
            }
          }
        })

        window.addEventListener('keyup', (e) => {
          if (
            document.querySelector('#container').classList.contains('hideY') &&
            window.roullete._camera.selfCam
          ) {
            window.roullete._camera.keyPressed[e.code] = false
          }
        })
        /* setInterval(function () {
          if (keyPressed['ArrowUp']) {
            window.roullete._camera.selfUpdate('ArrowUp')
          }
          if (keyPressed['ArrowDown']) {
            window.roullete._camera.selfUpdate('ArrowDown')
          }
          if (keyPressed['ArrowRight']) {
            window.roullete._camera.selfUpdate('ArrowRight')
          }
          if (keyPressed['ArrowLeft']) {
            window.roullete._camera.selfUpdate('ArrowLeft')
          }
        }, 10) */
        // document.querySelector('#marbleUnit').value = 54
        document.querySelector('#in_names').addEventListener('input', (e) => {
          if (e.data == ',') inputNameFn()
        }),
          document.querySelector('#in_names').addEventListener('blur', () => {
            inputNameFn()
          })

        document.querySelector('#btnShuffle').addEventListener('click', () => {
          inputNameFn()
        })

        /* document.querySelector('#btnStop').addEventListener('click', () => {
            window.roullete.reset(), (ready = !1)
          }), */
        document.querySelector('#btnStart').addEventListener('click', () => {
          if (!document.querySelector('#in_names').value == '') {
            document.querySelector('#container').classList.add('hideY'),
              ready &&
                (gtag('event', 'start', {
                  event_category: 'roulette',
                  event_label: 'start',
                  value: window.roullete.getCount(),
                }),
                window.roullete.start())
          }
        }),
          document
            .querySelector('.unitSettings button')
            .addEventListener('click', (e) => {
              const li = document.createElement('li')
              const label = document.createElement('label')
              label.innerHTML = ` 별풍선
              <input type="number" class="marbleUnit" value="">개 = 구슬
              <input type="number" class="marbleUnit" value=""> 개`
              li.append(label)
              document.querySelector('.unitSettings ul').append(li)
            }),
          document
            .querySelector('#chkSkill')
            .addEventListener('change', (e) => {
              ;(window.options.useSkills = e.target.matches(':checked')),
                window.roullete.setWinningRank(window.options.winningRank)
            }),
          document
            .querySelector('#in_winningRank')
            .addEventListener('change', (e) => {
              const t = parseInt(e.target.value, 10)
              setWinnerRank(isNaN(t) ? 0 : t)
            }),
          document
            .querySelector('#btnRandomWinner')
            .addEventListener('click', () => {
              const e = window.roullete.getCount()
              setWinnerRank(Math.floor(Math.random() * e + 1))
            }),
          document
            .querySelector('#btnFirstWinner')
            .addEventListener('click', () => {
              const e = window.roullete.getCount()
              setWinnerRank(1)
            }),
          document
            .querySelector('#btnLastWinner')
            .addEventListener('click', () => {
              const e = window.roullete.getCount()
              setWinnerRank(e)
            }),
          document.querySelector('#btnShake').addEventListener('click', () => {
            window.roullete.shake(),
              gtag('event', 'shake', {
                event_category: 'roulette',
                event_label: 'shake',
                value: 1,
              })
          }),
          window.roullete.addEventListener('goal', () => {
            ;(ready = !1),
              document.querySelector('#container').classList.remove('hideY')
            window.roullete._camera.setSelfCam(false),
              document
                .querySelector('#cameraInfo span')
                .classList.remove('free')
          }),
          window.roullete.addEventListener('shakeAvailableChanged', (e) => {
            document
              .querySelector('#inGame')
              .classList.toggle('hide', !e.detail)
          }),
          document.querySelector('#btnShuffle').click()
      })
    </script>
    <div id="container">
      <div class="max-w-20 unitSettings">
        <h2>등록 기준</h2>
        <ul>
          <li>
            <label>
              별풍선
              <input type="number" class="marbleUnit" value="" />개 = 구슬
              <input type="number" class="marbleUnit" value="" /> 개
              <span id="marbleUnitEx"></span>
            </label>
          </li>
        </ul>
        <button>추가</button>
      </div>
      <div id="settings" class="settings">
        <p class="text">
          각 이름 뒤에 별과 슬래시를 붙여 각 구슬의 수와 가중치를 설정할 수
          있습니다. (ex: Tom*2, Jane/5)<br />
          후원 메세지 내의 슬래시와 별은 자동으로 제거됩니다.(ex: Tom*2 ->
          Tom2)<br />
        </p>
        <textarea
          id="in_names"
          placeholder="쉼표나 줄로 구분된 텍스트를 입력하세요"
        ></textarea>

        <div class="actions">
          <div class="buttons">
            <label>
              당첨 순위는
              <input type="number" id="in_winningRank" value="1" min="1" />번째
              구슬 입니다
            </label>
            <div class="buttons">
              <button id="btnFirstWinner">1등</button>
              <button id="btnLastWinner">꼴등</button>
              <button id="btnRandomWinner">랜덤</button>
            </div>
          </div>
          <div class="buttons">
            <label>
              <input type="checkbox" id="chkSkill" checked="" /> 스킬 사용
            </label>
            <!-- <button id="btnStop">Stop</button> -->
            <button id="btnStart">시작</button>
            <button id="btnShuffle">셔플</button>
          </div>
        </div>
        <!--  <img
    src="/images/roulette/marble_body.png"
    alt=""
    width="100px"
    height="100px"
    style="z-index: 11"
  /> -->
      </div>
      <div id="rankings" class="rankings max-w-30">
        <h2 style="text-align: center">랭킹</h2>
        <div class="ulBox"><ul></ul></div>
      </div>
    </div>
    <div id="inGame" class="hide settings">
      <button id="btnShake">Shake!</button>
    </div>
    <div id="cameraInfo">
      <span class="" style="color: red">자유시점 ON</span>
      V 키를 누르면 카메라 모드가 전환됩니다<br />스페이스바 키를 누르면 맵을
      흔들 수 있습니다
    </div>
    <div class="copyright">
      &copy; 2023.<a href="https://lazygyu.net" target="_blank">lazygyu</a>
    </div>
  </body>
</html>
